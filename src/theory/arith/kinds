# kinds                                                               -*- sh -*-
#
# For documentation on this file format, please refer to
# src/theory/builtin/kinds.
#

theory THEORY_ARITH ::cvc5::internal::theory::arith::TheoryArith "theory/arith/theory_arith.h"
typechecker "theory/arith/theory_arith_type_rules.h"

properties stable-infinite
properties check propagate ppStaticLearn presolve notifyRestart

rewriter ::cvc5::internal::theory::arith::ArithRewriter "theory/arith/arith_rewriter.h"

operator ADD 2: "arithmetic addition (N-ary)"
operator MULT 2: "arithmetic multiplication (N-ary)"
operator NONLINEAR_MULT 2: "synonym for MULT"
operator SUB 2 "arithmetic binary subtraction operator"
operator NEG 1 "arithmetic unary negation"
operator DIVISION 2 "real division, division by 0 undefined (user symbol)"
operator DIVISION_TOTAL 2 "real division with interpreted division by 0 (internal symbol)"
operator INTS_DIVISION 2 "integer division, division by 0 undefined (user symbol)"
operator INTS_DIVISION_TOTAL 2 "integer division with interpreted division by 0 (internal symbol)"
operator INTS_MODULUS 2 "integer modulus, division by 0 undefined (user symbol)"
operator INTS_MODULUS_TOTAL 2 "integer modulus with interpreted division by 0 (internal symbol)"
operator ABS 1 "absolute value"
parameterized DIVISIBLE DIVISIBLE_OP 1 "divisibility-by-k predicate; first parameter is a DIVISIBLE_OP, second is integer term"
operator POW 2 "arithmetic power"
operator POW2 1 "arithmetic power of 2"

operator MAX3 3 "max among 3 reals"
operator ILOG2 1 "integer-valued logarithm of base 2 for reals"

operator EXPONENTIAL 1 "exponential"
operator SINE 1 "sine"
operator COSINE 1 "consine"
operator TANGENT 1 "tangent"
operator COSECANT 1 "cosecant"
operator SECANT 1 "secant"
operator COTANGENT 1 "cotangent"
operator ARCSINE 1 "arc sine"
operator ARCCOSINE 1 "arc consine"
operator ARCTANGENT 1 "arc tangent"
operator ARCCOSECANT 1 "arc cosecant"
operator ARCSECANT 1 "arc secant"
operator ARCCOTANGENT 1 "arc cotangent"

operator SQRT 1 "square root"

constant DIVISIBLE_OP \
  struct \
  Divisible \
  ::cvc5::internal::DivisibleHashFunction \
  "util/divisible.h" \
  "operator for the divisibility-by-k predicate; payload is an instance of the cvc5::internal::Divisible class"

sort REAL_TYPE \
    Cardinality::REALS \
    well-founded \
        "NodeManager::currentNM()->mkConstReal(Rational(0))" \
        "expr/node_manager.h" \
    "real type"
sort INTEGER_TYPE \
    Cardinality::INTEGERS \
    well-founded \
        "NodeManager::currentNM()->mkConstInt(Rational(0))" \
        "expr/node_manager.h" \
    "integer type"

constant CONST_RATIONAL \
    class \
    Rational+ \
    ::cvc5::internal::RationalHashFunction \
    "util/rational.h" \
    "a multiple-precision rational constant; payload is an instance of the cvc5::internal::Rational class"

constant CONST_INTEGER \
    class \
    Rational+ \
    ::cvc5::internal::RationalHashFunction \
    "util/rational.h" \
    "a multiple-precision integer constant; payload is an instance of the cvc5::internal::Rational class"

constant REAL_ALGEBRAIC_NUMBER_OP \
    class \
    RealAlgebraicNumber+ \
    ::cvc5::internal::RealAlgebraicNumberHashFunction \
    "util/real_algebraic_number.h" \
    "a real algebraic number constant; payload is an instance of the cvc5::internal::RealAlgebraicNumber class"
parameterized REAL_ALGEBRAIC_NUMBER REAL_ALGEBRAIC_NUMBER_OP 0 "a real algebraic number constant; payload is an instance of the cvc5::internal::RealAlgebraicNumber class"

enumerator REAL_TYPE \
    "::cvc5::internal::theory::arith::RationalEnumerator" \
    "theory/arith/type_enumerator.h"
enumerator INTEGER_TYPE \
    "::cvc5::internal::theory::arith::IntegerEnumerator" \
    "theory/arith/type_enumerator.h"

operator LT 2 "less than, x < y"
operator LEQ 2 "less than or equal, x <= y"
operator GT 2 "greater than, x > y"
operator GEQ 2 "greater than or equal, x >= y"

# represents an indexed root predicate. See util/indexed_root_predicate.h for more documentation.
constant INDEXED_ROOT_PREDICATE_OP \
  struct \
  IndexedRootPredicate \
  ::cvc5::internal::IndexedRootPredicateHashFunction \
  "util/indexed_root_predicate.h" \
  "operator for the indexed root predicate; payload is an instance of the cvc5::internal::IndexedRootPredicate class"
parameterized INDEXED_ROOT_PREDICATE INDEXED_ROOT_PREDICATE_OP 2 "indexed root predicate; first parameter is a INDEXED_ROOT_PREDICATE_OP, second is a real variable compared to zero, third is a polynomial"

operator IS_INTEGER 1 "term-is-integer predicate (parameter is a real-sorted term)"
operator TO_INTEGER 1 "convert term to integer by the floor function (parameter is a real-sorted term)"
operator TO_REAL 1 "cast term to real (parameter is an integer-sorted term)"

typerule ADD ::cvc5::internal::theory::arith::ArithOperatorTypeRule
typerule MULT ::cvc5::internal::theory::arith::ArithOperatorTypeRule
typerule NONLINEAR_MULT ::cvc5::internal::theory::arith::ArithOperatorTypeRule
typerule SUB ::cvc5::internal::theory::arith::ArithOperatorTypeRule
typerule NEG ::cvc5::internal::theory::arith::ArithOperatorTypeRule
typerule DIVISION ::cvc5::internal::theory::arith::ArithOperatorTypeRule
typerule POW ::cvc5::internal::theory::arith::ArithOperatorTypeRule

typerule CONST_RATIONAL ::cvc5::internal::theory::arith::ArithConstantTypeRule
typerule CONST_INTEGER ::cvc5::internal::theory::arith::ArithConstantTypeRule

typerule REAL_ALGEBRAIC_NUMBER_OP ::cvc5::internal::theory::arith::ArithRealAlgebraicNumberOpTypeRule
typerule REAL_ALGEBRAIC_NUMBER ::cvc5::internal::theory::arith::ArithRealAlgebraicNumberTypeRule

typerule LT ::cvc5::internal::theory::arith::ArithRelationTypeRule
typerule LEQ ::cvc5::internal::theory::arith::ArithRelationTypeRule
typerule GT ::cvc5::internal::theory::arith::ArithRelationTypeRule
typerule GEQ ::cvc5::internal::theory::arith::ArithRelationTypeRule

typerule INDEXED_ROOT_PREDICATE_OP "SimpleTypeRule<RBuiltinOperator>"
typerule INDEXED_ROOT_PREDICATE ::cvc5::internal::theory::arith::IndexedRootPredicateTypeRule

typerule TO_REAL "SimpleTypeRule<RReal, ARealOrInteger>"
typerule TO_INTEGER "SimpleTypeRule<RInteger, ARealOrInteger>"
typerule IS_INTEGER "SimpleTypeRule<RBool, ARealOrInteger>"

typerule ABS ::cvc5::internal::theory::arith::ArithOperatorTypeRule
typerule INTS_DIVISION "SimpleTypeRule<RInteger, AInteger, AInteger>"
typerule INTS_MODULUS "SimpleTypeRule<RInteger, AInteger, AInteger>"
typerule DIVISIBLE "SimpleTypeRule<RBool, AInteger>"
typerule DIVISIBLE_OP "SimpleTypeRule<RBuiltinOperator>"

typerule DIVISION_TOTAL ::cvc5::internal::theory::arith::ArithOperatorTypeRule
typerule INTS_DIVISION_TOTAL "SimpleTypeRule<RInteger, AInteger, AInteger>"
typerule INTS_MODULUS_TOTAL "SimpleTypeRule<RInteger, AInteger, AInteger>"

typerule EXPONENTIAL "SimpleTypeRule<RReal, ARealOrInteger>"
typerule SINE "SimpleTypeRule<RReal, ARealOrInteger>"
typerule COSINE "SimpleTypeRule<RReal, ARealOrInteger>"
typerule TANGENT "SimpleTypeRule<RReal, ARealOrInteger>"
typerule COSECANT "SimpleTypeRule<RReal, ARealOrInteger>"
typerule SECANT "SimpleTypeRule<RReal, ARealOrInteger>"
typerule COTANGENT "SimpleTypeRule<RReal, ARealOrInteger>"
typerule ARCSINE "SimpleTypeRule<RReal, ARealOrInteger>"
typerule ARCCOSINE "SimpleTypeRule<RReal, ARealOrInteger>"
typerule ARCTANGENT "SimpleTypeRule<RReal, ARealOrInteger>"
typerule ARCCOSECANT "SimpleTypeRule<RReal, ARealOrInteger>"
typerule ARCSECANT "SimpleTypeRule<RReal, ARealOrInteger>"
typerule ARCCOTANGENT "SimpleTypeRule<RReal, ARealOrInteger>"
typerule POW2 "SimpleTypeRule<RInteger, AInteger>"
typerule MAX3 "SimpleTypeRule<RReal, AReal, AReal, AReal>"
typerule ILOG2 "SimpleTypeRule<RInteger, AReal>"

typerule SQRT "SimpleTypeRule<RReal, ARealOrInteger>"

nullaryoperator PI "pi"

typerule PI ::cvc5::internal::theory::arith::RealNullaryOperatorTypeRule

# Integer AND, which is parameterized by a (positive) bitwidth k.
# ((_ iand k) i1 i2) is equivalent to:
# (bv2int (bvand ((_ int2bv k) i1) ((_ int2bv k) i2)))
# for all integers i1, i2.
constant IAND_OP \
  struct \
  IntAnd \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::IntAnd >" \
  "util/iand.h" \
  "operator for integer AND; payload is an instance of the cvc5::internal::IntAnd class"
parameterized IAND IAND_OP 2 "integer version of AND operator; first parameter is an IAND_OP, second and third are integer terms"

typerule IAND_OP "SimpleTypeRule<RBuiltinOperator>"
typerule IAND ::cvc5::internal::theory::arith::IAndTypeRule

# Real version of fp.isNormal.
constant RFP_IS_NORMAL_OP \
  class \
  RfpIsNormal \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpIsNormal >" \
  "util/real_floatingpoint.h" \
  "real version of fp.isNormal"
parameterized RFP_IS_NORMAL RFP_IS_NORMAL_OP 1 "real version of fp.isNormal; first parameter is an RFP_IS_NORMAL_OP, and second is a real term"

typerule RFP_IS_NORMAL_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_IS_NORMAL ::cvc5::internal::theory::arith::RfpPropTypeRule

# Real version of fp.isSubnormal.
constant RFP_IS_SUBNORMAL_OP \
  class \
  RfpIsSubnormal \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpIsSubnormal >" \
  "util/real_floatingpoint.h" \
  "real version of fp.isSubnormal"
parameterized RFP_IS_SUBNORMAL RFP_IS_SUBNORMAL_OP 1 "real version of fp.isSubnormal; first parameter is an RFP_IS_SUBNORMAL_OP, and second is a real term"

typerule RFP_IS_SUBNORMAL_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_IS_SUBNORMAL ::cvc5::internal::theory::arith::RfpPropTypeRule

# Real version of fp.isZero.
constant RFP_IS_ZERO_OP \
  class \
  RfpIsZero \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpIsZero >" \
  "util/real_floatingpoint.h" \
  "real version of fp.isZero"
parameterized RFP_IS_ZERO RFP_IS_ZERO_OP 1 "real version of fp.isZero; first parameter is an RFP_IS_ZERO_OP, and second is a real term"

typerule RFP_IS_ZERO_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_IS_ZERO ::cvc5::internal::theory::arith::RfpPropTypeRule

# Real version of fp.isInfinite.
constant RFP_IS_INFINITE_OP \
  class \
  RfpIsInfinite \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpIsInfinite >" \
  "util/real_floatingpoint.h" \
  "real version of fp.isInfinite"
parameterized RFP_IS_INFINITE RFP_IS_INFINITE_OP 1 "real version of fp.isInfinite; first parameter is an RFP_IS_INFINITE_OP, and second is a real term"

typerule RFP_IS_INFINITE_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_IS_INFINITE ::cvc5::internal::theory::arith::RfpPropTypeRule

# Real version of fp.isNaN.
constant RFP_IS_NAN_OP \
  class \
  RfpIsNan \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpIsNan >" \
  "util/real_floatingpoint.h" \
  "real version of fp.isNaN"
parameterized RFP_IS_NAN RFP_IS_NAN_OP 1 "real version of fp.isNaN; first parameter is an RFP_IS_NAN_OP, and second is a real term"

typerule RFP_IS_NAN_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_IS_NAN ::cvc5::internal::theory::arith::RfpPropTypeRule

# Real version of fp.isNegative.
constant RFP_IS_NEGATIVE_OP \
  class \
  RfpIsNegative \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpIsNegative >" \
  "util/real_floatingpoint.h" \
  "real version of fp.isNegative"
parameterized RFP_IS_NEGATIVE RFP_IS_NEGATIVE_OP 1 "real version of fp.isNegative; first parameter is an RFP_IS_NEGATIVE_OP, and second is a real term"

typerule RFP_IS_NEGATIVE_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_IS_NEGATIVE ::cvc5::internal::theory::arith::RfpPropTypeRule

# Real version of fp.isPositive.
constant RFP_IS_POSITIVE_OP \
  class \
  RfpIsPositive \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpIsPositive >" \
  "util/real_floatingpoint.h" \
  "real version of fp.isPositive"
parameterized RFP_IS_POSITIVE RFP_IS_POSITIVE_OP 1 "real version of fp.isPositive; first parameter is an RFP_IS_POSITIVE_OP, and second is a real term"

typerule RFP_IS_POSITIVE_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_IS_POSITIVE ::cvc5::internal::theory::arith::RfpPropTypeRule

# Real version of the FP rounding operator, which is parameterized by 
# the precision.
# ((_ rfp.round eb sb) irm v) is equivalent to:
# ((_ to_fp eb sb) rm v) 
# for all reals v.
constant RFP_ROUND_OP \
  class \
  RfpRound \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpRound >" \
  "util/real_floatingpoint.h" \
  "real version of FP rounding operator; payload is an instance of the cvc5::internal::RfpRound class"
parameterized RFP_ROUND RFP_ROUND_OP 2 "real version of FP rounding operator; first parameter is an RFP_ROUND_OP, second is a rounding mode, and third is a real term"

typerule RFP_ROUND_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_ROUND ::cvc5::internal::theory::arith::RfpUnOpTypeRule

# Real version of fp.add.
constant RFP_ADD_OP \
  class \
  RfpAdd \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpAdd >" \
  "util/real_floatingpoint.h" \
  "real version of fp.add"
parameterized RFP_ADD RFP_ADD_OP 3 "real version of fp.add; first parameter is an RFP_ADD_OP, second is a rounding mode, and third and fourth are real terms"

typerule RFP_ADD_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_ADD ::cvc5::internal::theory::arith::RfpBinOpTypeRule

# Real version of fp.sub.
constant RFP_SUB_OP \
  class \
  RfpSub \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpSub >" \
  "util/real_floatingpoint.h" \
  "real version of fp.sub"
parameterized RFP_SUB RFP_SUB_OP 3 "real version of fp.sub; first parameter is an RFP_SUB_OP, second is a rounding mode, and third and fourth are real terms"

typerule RFP_SUB_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_SUB ::cvc5::internal::theory::arith::RfpBinOpTypeRule

# Real version of fp.neg.
constant RFP_NEG_OP \
  class \
  RfpNeg \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpNeg >" \
  "util/real_floatingpoint.h" \
  "real version of fp.neg"
parameterized RFP_NEG RFP_NEG_OP 1 "real version of fp.neg; first parameter is an RFP_NEG_OP, and second is a real term"

typerule RFP_NEG_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_NEG ::cvc5::internal::theory::arith::RfpUnOpTypeRule

# Real version of fp.mul.
constant RFP_MUL_OP \
  class \
  RfpMul \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpMul >" \
  "util/real_floatingpoint.h" \
  "real version of fp.mul"
parameterized RFP_MUL RFP_MUL_OP 3 "real version of fp.mul; first parameter is an RFP_MUL_OP, second is a rounding mode, and third and fourth are real terms"

typerule RFP_MUL_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_MUL ::cvc5::internal::theory::arith::RfpBinOpTypeRule

# Real version of fp.div.
constant RFP_DIV_OP \
  class \
  RfpDiv \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpDiv >" \
  "util/real_floatingpoint.h" \
  "real version of fp.div"
parameterized RFP_DIV RFP_DIV_OP 3 "real version of fp.div; first parameter is an RFP_DIV_OP, second is a rounding mode, and third and fourth are real terms"

typerule RFP_DIV_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_DIV ::cvc5::internal::theory::arith::RfpBinOpTypeRule

# Real version of fp.eq.
constant RFP_EQ_OP \
  class \
  RfpEq \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpEq >" \
  "util/real_floatingpoint.h" \
  "real version of fp.eq"
parameterized RFP_EQ RFP_EQ_OP 2 "real version of fp.eq; first parameter is an RFP_EQ_OP, and second and third are real terms"

typerule RFP_EQ_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_EQ ::cvc5::internal::theory::arith::RfpRelOpTypeRule

# Real version of fp.lt.
constant RFP_LT_OP \
  class \
  RfpLt \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpLt >" \
  "util/real_floatingpoint.h" \
  "real version of fp.lt"
parameterized RFP_LT RFP_LT_OP 2 "real version of fp.lt; first parameter is an RFP_LT_OP, and second and third are real terms"

typerule RFP_LT_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_LT ::cvc5::internal::theory::arith::RfpRelOpTypeRule

# Real version of fp.le.
constant RFP_LE_OP \
  class \
  RfpLe \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpLe >" \
  "util/real_floatingpoint.h" \
  "real version of fp.le"
parameterized RFP_LE RFP_LE_OP 2 "real version of fp.le; first parameter is an RFP_Le_OP, and second and third are real terms"

typerule RFP_LE_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_LE ::cvc5::internal::theory::arith::RfpRelOpTypeRule

# Real version of fp.gt.
constant RFP_GT_OP \
  class \
  RfpGt \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpGt >" \
  "util/real_floatingpoint.h" \
  "real version of fp.gt"
parameterized RFP_GT RFP_GT_OP 2 "real version of fp.gt; first parameter is an RFP_GT_OP, and second and third are real terms"

typerule RFP_GT_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_GT ::cvc5::internal::theory::arith::RfpRelOpTypeRule

# Real version of fp.ge.
constant RFP_GE_OP \
  class \
  RfpGe \
  "::cvc5::internal::UnsignedHashFunction< ::cvc5::internal::RfpGe >" \
  "util/real_floatingpoint.h" \
  "real version of fp.ge"
parameterized RFP_GE RFP_GE_OP 2 "real version of fp.ge; first parameter is an RFP_GE_OP, and second and third are real terms"

typerule RFP_GE_OP "SimpleTypeRule<RBuiltinOperator>"
typerule RFP_GE ::cvc5::internal::theory::arith::RfpRelOpTypeRule

endtheory
